version: '3.8'

services:
  postgres_db:
    image: postgres:latest
    container_name: postgres_booking
    restart: always
    environment:
      POSTGRES_USER: yeqorka
      POSTGRES_PASSWORD: test228
      POSTGRES_DB: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_booking:/var/lib/postgresql/data
  redis:
    image: redis:latest
    container_name: redis_booking
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data_booking:/data
  # FOR PROD
  # public_api:
  #   build: 
  #     context: .
  #     dockerfile: apps/public/DockerFile
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - postgres_db
  #   environment:
      # POSTGRES_USER: yeqorka
      # POSTGRES_PASSWORD: test228
      # POSTGRES_HOST: postgres_db
      # POSTGRES_PORT: 5432
      # POSTGRES_NAME: postgres

      # JWT_SECRET: MY_MEGA_SUPER_ULTRA_EBANUTY_PUBLIC_JWT_SECRET # Secret key used to sign and verify JWT tokens
      # JWT_TOKEN_AUDIENCE: localhost:3000 # Expected audience (recipient, a.k. client ) of the token, used for validation
      # JWT_TOKEN_ISSUER: localhost:3000 # Entity that issued the JWT, used for validation ( it is back-end )
      # JWT_ACCESS_TOKEN_TTL: 36000 # Time-to-live for the JWT access token in seconds (1 hour)\
      # JWT_REFRESH_TOKEN_TTL: 86400

volumes:
  postgres_data_booking:
  redis_data_booking: